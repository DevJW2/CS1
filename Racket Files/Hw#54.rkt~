#|  hw54
    Jeffrey Weng mcjeffrey168@gmail.com 
--------------------------------------------
Structuring questions for recursive problems
0  structure of the problem
---------------------------
0a. What problem are you asked to solve?
    and What does "size" mean in the context of that problem?
find the duplicates of all the elements in the list 
size = length of L - 1
0b. What samples will test the procedure and what answers are
    required? You must know the expected answers, and tests
    should be the smallest useful ones.
(duplicate '(1 2 3)) = (1 1 2 2 3 3)

0c. What information do you have to be told?
    That is, what information has to be supplied as parameters?
the list

0d. What is the structure of the answer you will produce?
    That is, what will your function produce?
    A number? An integer? A Boolean? A list?
a list

1   structure of the recursive solution
---------------------------------------
1a. What problem can Mr. Brooks solve? Use your answers to 0a 
    to describe the same problem, except smaller in size,
    according to your meaning for "size".
the duplicates of all the numbers in L - 1

1b. What sub-problem will you ask Mr. Brooks to solve? and
    How will you use Mr. Brooks's answer to construct your own?
Mr.brooks will solve for the duplicate the number, returning the element twice

2  structure of the base case solution
--------------------------------------
2a.  What is the base case?  That is what is the smallest version 
     of this problem that you are willing to answer?
     Equivalently, what is the smallest version that it makes 
     any sense for me to ask you? 
     You must be able to solve this smallest version without
     asking anything of Mr. Brooks.

The base case would just be two similar elements
2b.  How can you solve the base case for this problem?
return the two similar elements

end of structuring questions
-------------------------------------------- |# 

; Finds the duplicate of each element and returns the new list [from question 0a]
(display "Find the duplicate of each element") (newline)
(define duplicate
  (lambda (L)  ; parameters [0c]
    
    ; show the parameter value(s), for debugging
    (display "     L = ") (display L) (newline)
    (newline) 
    
    (if (> (length L) 1)  ; Choose between base case(s) vs. recursive cases [2a]
        
        ; solution for recursive cases [1b]
        ; Use a procedure like +, APPEND, AND, or OR to combine the results...
        (append
         
         ; ... of handling the first element...
         (list (car L) (car L))
         ;end of handling the first element
         
         ; ...with whatever Mr. Brooks does with the rest of the list
         (duplicate (cdr L))
         
         )  ; end of "solution for recursive cases"

        ; solution for base case [2b]
        (list (car L) (car L))
        
        )  ;end of "Choose between base case(s) vs. recursive cases"
    )) ; end of lambda and define

; tests  [0b]
;base case(s)
(display (duplicate '(1 2) ))
(display " ...should be (1 1 2 2)") (newline)
(display "-----------------") (newline) (newline)

; simple recursive case(s)
(display (duplicate '(1 2 3) ))
(display " ...should be (1 1 2 2 3 3)") (newline)
(display "-----------------") (newline) (newline)

; cases requiring multiple recursive calls
(display (duplicate '(1 2 3 4) ))
(display " ...should be (1 1 2 2 3 3 4 4)") (newline) 
(display "-----------------") (newline) (newline)





